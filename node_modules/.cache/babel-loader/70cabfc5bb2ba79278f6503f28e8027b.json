{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\Cristhiandcl8\\\\Desktop\\\\Cristhiandcl\\\\fullStackPackages\\\\react\\\\tenzies-game\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";import _slicedToArray from\"C:\\\\Users\\\\Cristhiandcl8\\\\Desktop\\\\Cristhiandcl\\\\fullStackPackages\\\\react\\\\tenzies-game\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import React from\"react\";import Die from\"./Die\";import{nanoid}from\"nanoid\";import Confetti from\"react-confetti\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function App(){var _React$useState=React.useState(allNewDice()),_React$useState2=_slicedToArray(_React$useState,2),dice=_React$useState2[0],setDice=_React$useState2[1];var _React$useState3=React.useState(false),_React$useState4=_slicedToArray(_React$useState3,2),tenzies=_React$useState4[0],setTenzies=_React$useState4[1];function allNewDice(){var newDice=[];for(var i=0;i<10;i++){newDice.push({value:Math.ceil(Math.random()*6),isHeld:false,id:nanoid()});}return newDice;}function rollDice(){if(!tenzies){setDice(function(prevDice){return prevDice.map(function(die){return die.isHeld?die:_objectSpread(_objectSpread({},die),{},{value:Math.ceil(Math.random()*6)});});});}else{setTenzies(false);setDice(allNewDice());}}function _holdDice(id){setDice(function(oldDice){return oldDice.map(function(die){return die.id===id?_objectSpread(_objectSpread({},die),{},{isHeld:!die.isHeld}):die;});});}React.useEffect(function(){var allMarked=dice.every(function(die){return die.isHeld;});var allEqual=dice.every(function(die){return die.value===dice[0].value;});if(allEqual&&allMarked){setTenzies(true);}},[dice]);var diceElements=dice.map(function(die){return/*#__PURE__*/_jsx(Die,{value:die.value,isHeld:die.isHeld,holdDice:function holdDice(){return _holdDice(die.id);}},die.id);});return/*#__PURE__*/_jsxs(\"main\",{children:[tenzies&&/*#__PURE__*/_jsx(Confetti,{width:Window.width}),/*#__PURE__*/_jsx(\"h1\",{className:\"title\",children:\"Tenzies\"}),/*#__PURE__*/_jsx(\"p\",{className:\"instructions\",children:\"Roll until all dice are the same. Click each die to freeze it at its current value between rolls.\"}),/*#__PURE__*/_jsx(\"div\",{className:\"dice-container\",children:diceElements}),/*#__PURE__*/_jsx(\"button\",{className:\"roll-dice\",onClick:rollDice,children:!tenzies?\"Roll\":\"Play Again\"})]});}","map":{"version":3,"sources":["C:/Users/Cristhiandcl8/Desktop/Cristhiandcl/fullStackPackages/react/tenzies-game/src/App.js"],"names":["React","Die","nanoid","Confetti","App","useState","allNewDice","dice","setDice","tenzies","setTenzies","newDice","i","push","value","Math","ceil","random","isHeld","id","rollDice","prevDice","map","die","holdDice","oldDice","useEffect","allMarked","every","allEqual","diceElements","Window","width"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Die from \"./Die\";\nimport { nanoid } from \"nanoid\";\nimport Confetti from \"react-confetti\";\n\nexport default function App() {\n  const [dice, setDice] = React.useState(allNewDice());\n  const [tenzies, setTenzies] = React.useState(false);\n\n  function allNewDice() {\n    const newDice = [];\n    for (let i = 0; i < 10; i++) {\n      newDice.push({\n        value: Math.ceil(Math.random() * 6),\n        isHeld: false,\n        id: nanoid(),\n      });\n    }\n    return newDice;\n  }\n\n  function rollDice() {\n    if (!tenzies) {\n      setDice((prevDice) =>\n        prevDice.map((die) =>\n          die.isHeld ? die : { ...die, value: Math.ceil(Math.random() * 6) }\n        )\n      );\n    } else {\n      setTenzies(false);\n      setDice(allNewDice())\n    }\n  }\n\n  function holdDice(id) {\n    setDice((oldDice) =>\n      oldDice.map((die) => {\n        return die.id === id ? { ...die, isHeld: !die.isHeld } : die;\n      })\n    );\n  }\n\n  React.useEffect(() => {\n    const allMarked = dice.every((die) => die.isHeld);\n    const allEqual = dice.every((die) => die.value === dice[0].value);\n    if (allEqual && allMarked) {\n      setTenzies(true);\n    }\n  }, [dice]);\n\n  const diceElements = dice.map((die) => (\n    <Die\n      key={die.id}\n      value={die.value}\n      isHeld={die.isHeld}\n      holdDice={() => holdDice(die.id)}\n    />\n  ));\n\n  return (\n    <main>\n      {tenzies && <Confetti width={Window.width}/>}\n      <h1 className=\"title\">Tenzies</h1>\n      <p className=\"instructions\">\n        Roll until all dice are the same. Click each die to freeze it at its\n        current value between rolls.\n      </p>\n      <div className=\"dice-container\">{diceElements}</div>\n      <button className=\"roll-dice\" onClick={rollDice}>\n        {!tenzies ? \"Roll\" : \"Play Again\"}\n      </button>\n    </main>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}