{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cristhiandcl8\\\\Desktop\\\\Cristhiandcl\\\\fullStackPackages\\\\react\\\\tenzies-game\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Die from \"./Die\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [dice, setDice] = React.useState(allNewDice());\n\n  function allNewDice() {\n    const newDice = [];\n\n    for (let i = 0; i < 10; i++) {\n      newDice.push({\n        value: Math.ceil(Math.random() * 6),\n        isHeld: false,\n        id: nanoid()\n      });\n    }\n\n    return newDice;\n  }\n  /**\n   * Challenge: Update the `rollDice` function to not just roll\n   * all new dice, but instead to look through the existing dice\n   * to NOT role any that are being `held`.\n   * \n   * Hint: this will look relatively similiar to the `holdDice`\n   * function below. When creating new dice, remember to use\n   * `id: nanoid()` so any new dice have an `id` as well.\n   */\n\n\n  function rollDice() {\n    setDice(prevDice => prevDice.map(die => die.isHeld ? die : { ...die,\n      value: Math.ceil(Math.random() * 6)\n    }));\n  }\n\n  function holdDice(id) {\n    setDice(oldDice => oldDice.map(die => {\n      return die.id === id ? { ...die,\n        isHeld: !die.isHeld\n      } : die;\n    }));\n  }\n\n  const diceElements = dice.map(die => /*#__PURE__*/_jsxDEV(Die, {\n    value: die.value,\n    isHeld: die.isHeld,\n    holdDice: () => holdDice(die.id)\n  }, die.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Tenzies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"instructions\",\n      children: \"Roll until all dice are the same. Click each die to freeze it at its current value between rolls.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dice-container\",\n      children: diceElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"roll-dice\",\n      onClick: rollDice,\n      children: \"Roll\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"FBcbDbTSXYNs4QNsRKPH911OvUI=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Cristhiandcl8/Desktop/Cristhiandcl/fullStackPackages/react/tenzies-game/src/App.js"],"names":["React","Die","nanoid","App","dice","setDice","useState","allNewDice","newDice","i","push","value","Math","ceil","random","isHeld","id","rollDice","prevDice","map","die","holdDice","oldDice","diceElements"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAAQC,MAAR,QAAqB,QAArB;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAE1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,KAAK,CAACM,QAAN,CAAeC,UAAU,EAAzB,CAAxB;;AAEA,WAASA,UAAT,GAAsB;AAClB,UAAMC,OAAO,GAAG,EAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBD,MAAAA,OAAO,CAACE,IAAR,CAAa;AACTC,QAAAA,KAAK,EAAEC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgB,CAA1B,CADE;AAETC,QAAAA,MAAM,EAAE,KAFC;AAGTC,QAAAA,EAAE,EAAEd,MAAM;AAHD,OAAb;AAKH;;AACD,WAAOM,OAAP;AACH;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASS,QAAT,GAAoB;AAChBZ,IAAAA,OAAO,CAACa,QAAQ,IAAIA,QAAQ,CAACC,GAAT,CAAaC,GAAG,IAAIA,GAAG,CAACL,MAAJ,GAAaK,GAAb,GAAmB,EAAC,GAAGA,GAAJ;AAAST,MAAAA,KAAK,EAAGC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgB,CAA1B;AAAjB,KAAvC,CAAb,CAAP;AACH;;AAED,WAASO,QAAT,CAAkBL,EAAlB,EAAsB;AAClBX,IAAAA,OAAO,CAACiB,OAAO,IAAIA,OAAO,CAACH,GAAR,CAAYC,GAAG,IAAI;AAClC,aAAOA,GAAG,CAACJ,EAAJ,KAAWA,EAAX,GACH,EAAC,GAAGI,GAAJ;AAASL,QAAAA,MAAM,EAAE,CAACK,GAAG,CAACL;AAAtB,OADG,GAEHK,GAFJ;AAGH,KAJkB,CAAZ,CAAP;AAKH;;AAED,QAAMG,YAAY,GAAGnB,IAAI,CAACe,GAAL,CAASC,GAAG,iBAC7B,QAAC,GAAD;AAEI,IAAA,KAAK,EAAEA,GAAG,CAACT,KAFf;AAGI,IAAA,MAAM,EAAES,GAAG,CAACL,MAHhB;AAII,IAAA,QAAQ,EAAE,MAAMM,QAAQ,CAACD,GAAG,CAACJ,EAAL;AAJ5B,KACSI,GAAG,CAACJ,EADb;AAAA;AAAA;AAAA;AAAA,UADiB,CAArB;AASA,sBACI;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAG,MAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,gBACKO;AADL;AAAA;AAAA;AAAA;AAAA,YAHJ,eAMI;AAAQ,MAAA,SAAS,EAAC,WAAlB;AAA8B,MAAA,OAAO,EAAEN,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;GAxDuBd,G;;KAAAA,G","sourcesContent":["import React from \"react\"\nimport Die from \"./Die\"\nimport {nanoid} from \"nanoid\"\n\nexport default function App() {\n\n    const [dice, setDice] = React.useState(allNewDice())\n    \n    function allNewDice() {\n        const newDice = []\n        for (let i = 0; i < 10; i++) {\n            newDice.push({\n                value: Math.ceil(Math.random() * 6),\n                isHeld: false,\n                id: nanoid()\n            })\n        }\n        return newDice\n    }\n    \n/**\n * Challenge: Update the `rollDice` function to not just roll\n * all new dice, but instead to look through the existing dice\n * to NOT role any that are being `held`.\n * \n * Hint: this will look relatively similiar to the `holdDice`\n * function below. When creating new dice, remember to use\n * `id: nanoid()` so any new dice have an `id` as well.\n */\n    function rollDice() {\n        setDice(prevDice => prevDice.map(die => die.isHeld ? die : {...die, value : Math.ceil(Math.random() * 6)}))\n    }\n    \n    function holdDice(id) {\n        setDice(oldDice => oldDice.map(die => {\n            return die.id === id ? \n                {...die, isHeld: !die.isHeld} :\n                die\n        }))\n    }\n    \n    const diceElements = dice.map(die => (\n        <Die \n            key={die.id} \n            value={die.value} \n            isHeld={die.isHeld} \n            holdDice={() => holdDice(die.id)}\n        />\n    ))\n    \n    return (\n        <main>\n            <h1 className=\"title\">Tenzies</h1>\n            <p className=\"instructions\">Roll until all dice are the same. Click each die to freeze it at its current value between rolls.</p>\n            <div className=\"dice-container\">\n                {diceElements}\n            </div>\n            <button className=\"roll-dice\" onClick={rollDice}>Roll</button>\n        </main>\n    )\n}"]},"metadata":{},"sourceType":"module"}